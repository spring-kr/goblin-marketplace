from flask import Flask, jsonify, request
from flask_cors import CORS
import random
import json
from datetime import datetime
from collections import defaultdict

app = Flask(__name__)
CORS(app)

# Ï†ÑÏó≠ Î≥ÄÏàò
conversation_memory = {}
user_profiles = {}
context_depth = 5


def master_analyze_user_message(message, conversation_id):
    """ÏõêÎ≥∏ Ï¥åÏû• ÏãúÏä§ÌÖúÏùò ÎßàÏä§ÌÑ∞Í∏â ÏÇ¨Ïö©Ïûê Î©îÏãúÏßÄ Î∂ÑÏÑù"""

    # Ï†ÑÎ¨∏Ï†ÅÏù∏ ÌÇ§ÏõåÎìú ÌôïÏù∏
    professional_keywords = [
        # ÏïÑÏù¥ÎîîÏñ¥ ÏÉùÏÑ± Í¥ÄÎ†®
        "ÏïÑÏù¥ÎîîÏñ¥",
        "ÏÉùÏÑ±",
        "ÎßåÎì§Ïñ¥",
        "Ï†úÏûë",
        "Í∞úÎ∞ú",
        "ÎîîÏûêÏù∏",
        "Ï∞ΩÏûë",
        "Í∏∞Ìöç",
        "Íµ¨ÏÉÅ",
        "Î∞úÏÉÅ",
        "Í≥ÑÌöç",
        "ÏÑ§Í≥Ñ",
        "Íµ¨Ï∂ï",
        "ÏûëÏÑ±",
        "ÏôÑÏÑ±",
        "Ïã§Ìñâ",
        # ÎπÑÏ¶àÎãàÏä§ Í¥ÄÎ†®
        "Ïä§ÌÉÄÌä∏ÏóÖ",
        "Ìà¨Ïûê",
        "Í≤ΩÏòÅ",
        "Ï†ÑÎûµ",
        "ÎßàÏºÄÌåÖ",
        "ÎπÑÏ¶àÎãàÏä§",
        "ÏÇ¨ÏóÖ",
        "ÌöåÏÇ¨",
        "Í∏∞ÏóÖ",
        "Ï∞ΩÏóÖ",
        "Î∏åÎûúÎî©",
        "Îß§Ï∂ú",
        "ÏàòÏùµ",
        "ÏÑ±Ïû•",
        "ÏúµÏûê",
        "ÌéÄÎî©",
        "Î≤§Ï≤ò",
        "Ï∞ΩÏóÖÏûê",
        "nps",
        "Ïä§ÏΩîÏñ¥",
        "ÏßÄÌëú",
        "kpi",
        "roi",
        "Í≥†Í∞ù",
        "ÎßåÏ°±ÎèÑ",
        "Ï∂îÏ≤ú",
        "Ïû¨Íµ¨Îß§",
        "mvp",
        "pmf",
        "cac",
        "ltv",
        # Í∏∞Ïà† Í¥ÄÎ†®
        "Í∏∞Ïà†",
        "ÏÜåÌîÑÌä∏Ïõ®Ïñ¥",
        "ÏãúÏä§ÌÖú",
        "ÌîÑÎ°úÍ∑∏ÎûòÎ∞ç",
        "ÏïåÍ≥†Î¶¨Ï¶ò",
        "Îç∞Ïù¥ÌÑ∞",
        "AI",
        "Î®∏Ïã†Îü¨Îãù",
        "ÌÅ¥ÎùºÏö∞Îìú",
        "Î≥¥Ïïà",
        "ÎÑ§Ìä∏ÏõåÌÅ¨",
        "Ïï±",
        "Ïõπ",
        "ÌîåÎû´Ìèº",
    ]

    message_lower = message.lower()
    detected_keywords = [
        keyword for keyword in professional_keywords if keyword in message_lower
    ]

    # ÏùòÎèÑ Î∂ÑÏÑù
    intent = "general"
    if any(kw in message_lower for kw in ["ÏïÑÏù¥ÎîîÏñ¥", "ÏÉùÏÑ±", "ÎßåÎì§Ïñ¥"]):
        intent = "idea_generation"
    elif any(kw in message_lower for kw in ["ÎπÑÏ¶àÎãàÏä§", "ÏÇ¨ÏóÖ", "Ï∞ΩÏóÖ"]):
        intent = "business_consultation"
    elif any(kw in message_lower for kw in ["ÎßàÏºÄÌåÖ", "ÌôçÎ≥¥", "Í¥ëÍ≥†"]):
        intent = "marketing_strategy"
    elif any(kw in message_lower for kw in ["ÏïàÎÖï", "hello", "hi"]):
        intent = "greeting"

    # Í∞êÏ†ï Î∂ÑÏÑù
    emotion = "neutral"
    if any(kw in message_lower for kw in ["Ï¢ãÏïÑ", "Í∞êÏÇ¨", "Í≥†ÎßàÏõå", "ÎßåÏ°±"]):
        emotion = "positive"
    elif any(kw in message_lower for kw in ["Î¨∏Ï†ú", "Ïñ¥Î†§Ïõå", "ÌûòÎì§Ïñ¥", "ÏïàÎèº"]):
        emotion = "negative"
    elif any(kw in message_lower for kw in ["Í∂ÅÍ∏à", "ÏïåÍ≥†Ïã∂Ïñ¥", "Î∞∞Ïö∞Í≥†Ïã∂Ïñ¥"]):
        emotion = "curious"

    return {
        "detected_keywords": detected_keywords,
        "intent": intent,
        "emotion": emotion,
        "urgency": "medium",
        "domain": "general",
        "complexity": len(message.split()),
        "language_style": "formal" if "ÏäµÎãàÎã§" in message else "casual",
    }


def generate_master_response(message, analysis, conversation_id):
    """ÏõêÎ≥∏ Ï¥åÏû• ÏãúÏä§ÌÖúÏùò ÏùëÎãµ ÏÉùÏÑ±"""

    intent = analysis.get("intent", "general")
    emotion = analysis.get("emotion", "neutral")
    detected_keywords = analysis.get("detected_keywords", [])

    # Í∞êÏ†ïÏóê Îî∞Î•∏ Ïù∏ÏÇ¨Îßê
    if emotion == "positive":
        greeting = "Ìò∏Ìò∏! Ï¢ãÏùÄ Í∏∞Ïö¥Ïù¥ ÎäêÍª¥ÏßÄÎäîÍµ∞Ïöî! "
    elif emotion == "negative":
        greeting = "Ïñ¥Ìóà, Î≠îÍ∞Ä Í≥†ÎØºÏù¥ ÏûàÏñ¥ Î≥¥Ïù¥ÎäîÍµ¨ÎÇò. "
    elif emotion == "curious":
        greeting = "Ïò§Ìò∏! Í∂ÅÍ∏àÌïú Í≤å ÎßéÏùÄ Î∂ÑÏù¥Íµ∞Ïöî! "
    else:
        greeting = "Ïñ¥ÏÑú Ïò§Í≤åÎÇò! "

    # ÏùòÎèÑÎ≥Ñ ÏùëÎãµ ÏÉùÏÑ±
    if intent == "idea_generation":
        return f"""{greeting}ÏïÑÏù¥ÎîîÏñ¥ ÏÉùÏÑ±Ïù¥ÎùºÍ≥†? Ïù¥ Ï¥åÏû•Ïù¥ ÏßÅÏ†ë ÎÇòÏÑúÍ≤†Îã§ÎÑ§!

üéØ Ïñ¥Îñ§ Î∂ÑÏïºÏùò ÏïÑÏù¥ÎîîÏñ¥Í∞Ä ÌïÑÏöîÌïúÍ∞Ä?
‚Ä¢ üìä ÎπÑÏ¶àÎãàÏä§ ÏïÑÏù¥ÎîîÏñ¥ - Îèà ÎêòÎäî ÏÇ¨ÏóÖ ÏïÑÏù¥ÌÖúÏù¥ÏßÄ!
‚Ä¢ üí° Ï∞ΩÏóÖ ÏïÑÏù¥ÌÖú - Ï†äÏùÄÏù¥Îì§ Ï∞ΩÏóÖÌï† Îïå Ï¢ãÏùÄ Í≤ÉÎì§Ïù¥Ïïº
‚Ä¢ üì± Ïï±/ÏÑúÎπÑÏä§ ÏïÑÏù¥ÎîîÏñ¥ - ÏöîÏ¶ò ÏÑ∏ÏÉÅÏùÄ Îã§ Ïï±Ïù¥ÎçîÎùºÍ≥†
‚Ä¢ üé® Ï∞ΩÏûë/ÏΩòÌÖêÏ∏† ÏïÑÏù¥ÎîîÏñ¥ - Ïû¨ÎØ∏ÏûàÎäî Í±∏ ÎßåÎì§Ïñ¥Î≥¥ÏûêÍæ∏ÎÇò
‚Ä¢ üîß Î¨∏Ï†úÌï¥Í≤∞ ÏïÑÏù¥ÎîîÏñ¥ - Í≥®Ïπò ÏïÑÌîà Î¨∏Ï†úÎ•º Ìï¥Í≤∞Ìï¥Ï£ºÏßÄ

Íµ¨Ï≤¥Ï†ÅÏúºÎ°ú ÎßêÌï¥Î≥¥Í≤åÎÇò, Ïù¥ Ï¥åÏû•Ïù¥ ÏÜçÏãúÏõêÌûà ÎèÑÏôÄÏ£ºÍ≤†Îã§ÎÑ§! ÌÅ¨ÌïòÌïò!"""

    elif intent == "business_consultation":
        return f"""{greeting}ÏÇ¨ÏóÖ Ïù¥ÏïºÍ∏∞Ïù∏Í∞Ä? Ïù¥ Ï¥åÏû•Ïù¥ ÎßàÏùÑÏóêÏÑú Ïû•ÏÇ¨ÎèÑ Ìï¥Î¥§Í±∞Îì†!

üíº Ï¥åÏû•Ïùò ÎπÑÏ¶àÎãàÏä§ ÎπÑÎ≤ïÏùÑ Ï†ÑÏàòÌïòÍ≤†Îã§ÎÑ§:
‚Ä¢ üìà ÏÇ¨ÏóÖÍ≥ÑÌöçÏÑú - Ï†úÎåÄÎ°ú Îêú Í≥ÑÌöçÏù¥ Î∞òÏù¥Ïïº!
‚Ä¢ üí∞ Ìà¨ÏûêÏú†Ïπò - Îèà Íµ¨ÌïòÎäî Î≤ïÎèÑ ÏïåÎ†§Ï£ºÏßÄ
‚Ä¢ üìä ÏãúÏû•Î∂ÑÏÑù - Ïñ¥ÎîîÏÑú Ïû•ÏÇ¨Ìï¥Ïïº Ïûò ÎêòÎäîÏßÄ ÎßêÏù¥Ïïº
‚Ä¢ üéØ ÎßàÏºÄÌåÖ Ï†ÑÎûµ - ÏÜêÎãò ÎÅåÏñ¥Ïò§Îäî Î∞©Î≤ïÏù¥ÏßÄ!
‚Ä¢ üìã ÏÇ¨ÏóÖÎ™®Îç∏ - Ïñ¥ÎñªÍ≤å ÎèàÏùÑ Î≤å Í≤ÉÏù∏Í∞Ä?

Î≠êÎ∂ÄÌÑ∞ ÎèÑÏôÄÎã¨ÎùºÎäî Í±¥Í∞Ä? Ï¥åÏû•Ïù¥ Îã§ ÏïåÎ†§Ï£ºÍ≤†Îã§ÎÑ§!"""

    elif intent == "marketing_strategy":
        return f"""{greeting}ÌôçÎ≥¥ÏôÄ ÎßàÏºÄÌåÖ ÎßêÏù∏Í∞Ä? Ï¥åÏû•Ïù¥ ÎßàÏùÑ Ï∂ïÏ†úÎèÑ ÌôçÎ≥¥Ìï¥Î¥§Îã§ÎÑ§!

üì¢ Ï¥åÏû•Ïùò ÎßàÏºÄÌåÖ ÎÖ∏ÌïòÏö∞:
‚Ä¢ üéØ ÏÜêÎãò Ï∞æÍ∏∞ - ÎàÑÍ∞Ä Ïö∞Î¶¨ Í≥†Í∞ùÏù∏ÏßÄ ÏïåÏïÑÏïºÏßÄ
‚Ä¢ üì± SNS ÎßàÏºÄÌåÖ - ÏöîÏ¶òÏóî Ïù∏ÌÑ∞ÎÑ∑ÏúºÎ°ú Îã§ ÌïòÎçîÎùºÍ≥†
‚Ä¢ üí° ÌôçÎ≥¥ ÏïÑÏù¥ÎîîÏñ¥ - ÏÇ¨ÎûåÎì§ ÎààÍ∏∏ ÎÅå Î∞©Î≤ïÎì§ ÎßêÏù¥Ïïº
‚Ä¢ üè∑Ô∏è Î∏åÎûúÎìú Ïù¥Î¶Ñ - Í∏∞ÏñµÌïòÍ∏∞ Ïâ¨Ïö¥ Ïù¥Î¶ÑÏù¥ Ï¢ãÏßÄ!
‚Ä¢ üìä ÏÑ±Í≥º Ï∏°Ï†ï - ÏñºÎßàÎÇò Ïûò ÎêêÎäîÏßÄ Î¥êÏïº ÌïòÍ±∞Îì†

Ïñ¥Îñ§ Í±∏ ÎèÑÏôÄÎã¨ÎùºÎäî Í±¥Í∞Ä? Ï¥åÏû•Ïù¥ ÏÜçÏãúÏõêÌûà ÏïåÎ†§Ï£ºÏßÄ!"""

    elif intent == "greeting":
        return f"""{greeting}ÎÇòÎäî Ïù¥ ÎßàÏùÑÏùò Ï¥åÏû•ÎèÑÍπ®ÎπÑÎùºÎÑ§!

üèòÔ∏è Ï¥åÏû•Ïù¥ ÎèÑÏôÄÏ§Ñ Ïàò ÏûàÎäî Í≤ÉÎì§:
‚Ä¢ üéØ ÏïÑÏù¥ÎîîÏñ¥ ÎßåÎì§Í∏∞ - Í∏∞Î∞úÌïú ÏÉùÍ∞ÅÎì§ÏùÑ ÏßúÎÇ¥Ï£ºÏßÄ!
‚Ä¢ üíº ÏÇ¨ÏóÖ ÏÉÅÎã¥ - Ïû•ÏÇ¨ Ïûò ÎêòÎäî Î∞©Î≤ï ÏïåÎ†§Ï£ºÍ≥†
‚Ä¢ üìä ÏãúÏû• Î∂ÑÏÑù - Ïñ¥ÎîîÍ∞Ä Îèà Îê†ÏßÄ ÏïåÏïÑÎ¥êÏ£ºÍ≥†
‚Ä¢ üì¢ ÌôçÎ≥¥ Ï†ÑÎûµ - ÏÇ¨ÎûåÎì§ÌïúÌÖå ÏïåÎ¶¨Îäî Î∞©Î≤ïÎèÑ!
‚Ä¢ üîß Î¨∏Ï†ú Ìï¥Í≤∞ - Í≥®Ïπò ÏïÑÌîà ÏùºÎì§ÎèÑ ÌíÄÏñ¥Ï£ºÏßÄ

"ÏïÑÏù¥ÎîîÏñ¥ ÏÉùÏÑ±Ìï¥Ï§ò", "ÏÇ¨ÏóÖ ÎèÑÏôÄÏ§ò" Ïù¥Îü∞ ÏãùÏúºÎ°ú Ìé∏ÌïòÍ≤å ÎßêÌï¥Î≥¥Í≤åÎÇò!
Ïù¥ Ï¥åÏû•Ïù¥ Îã§ Ìï¥Í≤∞Ìï¥Ï£ºÍ≤†Îã§ÎÑ§! ÌÅ¨ÌïòÌïò!"""

    else:
        # Í∞êÏßÄÎêú ÌÇ§ÏõåÎìúÍ∞Ä ÏûàÏúºÎ©¥ Ï†ÑÎ¨∏ ÏùëÎãµ
        if detected_keywords:
            return f"""{greeting}'{', '.join(detected_keywords[:3])}'Ïóê ÎåÄÌï¥ Î¨ºÏñ¥Î≥¥ÎäîÍµ∞Ïöî!

Ï¥åÏû•Ïù¥ Ïù¥Îü∞ Í±∏ ÎèÑÏôÄÏ§Ñ Ïàò ÏûàÎã§ÎÑ§:
‚Ä¢ üéØ ÏïÑÏù¥ÎîîÏñ¥ ÏÉùÏÑ±ÌïòÍ∏∞ - Í∏∞Î∞úÌïú ÏÉùÍ∞Å ÏßúÎÇ¥Ï£ºÍ≥†
‚Ä¢ üíº ÏÇ¨ÏóÖ Ï°∞Ïñ∏ÌïòÍ∏∞ - Îèà Î≤ÑÎäî Î∞©Î≤ï ÏïåÎ†§Ï£ºÍ≥†
‚Ä¢ üì¢ ÎßàÏºÄÌåÖ Ï†ÑÎûµ - ÌôçÎ≥¥ÌïòÎäî ÎπÑÎ≤ï Ï†ÑÏàòÌï¥Ï£ºÏßÄ!

Îçî Íµ¨Ï≤¥Ï†ÅÏúºÎ°ú ÎßêÌï¥Î≥¥Í≤åÎÇò, ÏòàÎ•º Îì§Ïñ¥:
"Ïπ¥Ìéò Ï∞ΩÏóÖ ÏïÑÏù¥ÎîîÏñ¥ ÏÉùÏÑ±Ìï¥Ï§ò" Ïù¥Îü∞ ÏãùÏúºÎ°ú ÎßêÏù¥Ïïº!
Ï¥åÏû•Ïù¥ ÏÜçÏãúÏõêÌûà Ìï¥Í≤∞Ìï¥ÎìúÎ¶¨Í≤†Îã§ÎÑ§! üéØ"""

        # ÏùºÎ∞ò ÏùëÎãµ
        return f"""{greeting}'{message}'... Ïùå, Í∑∏Îü∞ ÎßêÏîÄÏù¥Íµ∞Ïöî!

Ï¥åÏû•Ïù¥ Îçî Ïûò ÎèÑÏôÄÎìúÎ¶¨Î†§Î©¥ Ïù¥Îü∞ ÏãùÏúºÎ°ú ÎßêÏîÄÌï¥ Î≥¥ÏÑ∏Ïöî:
‚Ä¢ "ÏïÑÏù¥ÎîîÏñ¥ ÏÉùÏÑ±Ìï¥Ï§ò" - Í∏∞Î∞úÌïú ÏÉùÍ∞Å ÏßúÎÇ¥ÎìúÎ¶¨Í≥†
‚Ä¢ "ÏÇ¨ÏóÖ Í≥ÑÌöç ÎèÑÏôÄÏ§ò" - Ïû•ÏÇ¨ Ïûò ÎêòÎäî Î∞©Î≤ï ÏïåÎ†§ÎìúÎ¶¨Í≥†  
‚Ä¢ "ÎßàÏºÄÌåÖ Ï†ÑÎûµ ÏßúÏ§ò" - ÌôçÎ≥¥ÌïòÎäî ÎπÑÎ≤ï Ï†ÑÏàòÌï¥ÎìúÎ¶¨ÏßÄ!

ÏòàÎ•º Îì§Î©¥: "Ìé´ÏÉµ Ï∞ΩÏóÖ ÏïÑÏù¥ÎîîÏñ¥ ÏÉùÏÑ±Ìï¥Ï§ò" Ïù¥Îü∞ ÏãùÏúºÎ°ú ÎßêÏù¥Ïïº!
Ï¥åÏû•Ïù¥ ÏÜçÏãúÏõêÌûà Ìï¥Í≤∞Ìï¥ÎìúÎ¶¨Í≤†Îã§ÎÑ§! ÌÅ¨ÌïòÌïò!"""


def update_conversation_memory(conversation_id, message, sender):
    """ÎåÄÌôî Î©îÎ™®Î¶¨ ÏóÖÎç∞Ïù¥Ìä∏"""
    if conversation_id not in conversation_memory:
        conversation_memory[conversation_id] = []

    conversation_memory[conversation_id].append(
        {"sender": sender, "message": message, "timestamp": datetime.now().isoformat()}
    )

    # Î©îÎ™®Î¶¨ ÌÅ¨Í∏∞ Ï†úÌïú
    if len(conversation_memory[conversation_id]) > context_depth * 2:
        conversation_memory[conversation_id] = conversation_memory[conversation_id][
            -context_depth * 2 :
        ]


@app.route("/")
def hello():
    return """<!DOCTYPE html>
<html>
<head>
    <title>üèòÔ∏è Village Chief System</title>
    <meta charset="utf-8">
    <style>
        body { 
            font-family: Arial, sans-serif; 
            margin: 0; 
            padding: 20px; 
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }
        .container { 
            max-width: 800px; 
            margin: 0 auto; 
            background: rgba(255,255,255,0.1); 
            padding: 30px; 
            border-radius: 15px;
            backdrop-filter: blur(10px);
        }
        h1 { 
            text-align: center; 
            color: #fff; 
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }
        .chat-container { 
            background: rgba(255,255,255,0.9); 
            color: #333; 
            padding: 20px; 
            border-radius: 10px; 
            margin: 20px 0;
        }
        .input-group { 
            display: flex; 
            gap: 10px; 
            margin: 20px 0; 
        }
        input[type="text"] { 
            flex: 1; 
            padding: 12px; 
            border: 1px solid #ddd; 
            border-radius: 5px; 
            font-size: 16px;
        }
        button { 
            padding: 12px 24px; 
            background: #4CAF50; 
            color: white; 
            border: none; 
            border-radius: 5px; 
            cursor: pointer; 
            font-size: 16px;
        }
        button:hover { background: #45a049; }
        .message { 
            margin: 10px 0; 
            padding: 15px; 
            border-radius: 8px; 
            border-left: 4px solid #4CAF50;
            line-height: 1.5;
        }
        .user-message { border-left-color: #2196F3; background: #e3f2fd; }
        .ai-message { border-left-color: #4CAF50; background: #e8f5e8; }
        .ai-message strong { color: #2e7d32; }
    </style>
</head>
<body>
    <div class="container">
        <h1>üèòÔ∏è Village Chief System</h1>
        <p style="text-align: center;"><strong>Ï¥åÏû•ÎèÑÍπ®ÎπÑÍ∞Ä Ïó¨Îü¨Î∂ÑÏùÑ ÎèÑÏôÄÎìúÎ¶ΩÎãàÎã§!</strong></p>
        
        <div class="chat-container">
            <div id="chatHistory"></div>
            <div class="input-group">
                <input type="text" id="messageInput" placeholder="Î©îÏãúÏßÄÎ•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî... (Ïòà: ÏïÑÏù¥ÎîîÏñ¥ ÏÉùÏÑ±Ìï¥Ï§ò)" />
                <button onclick="sendMessage()">Ï†ÑÏÜ°</button>
            </div>
        </div>
    </div>
    
    <script>
        function sendMessage() {
            const input = document.getElementById('messageInput');
            const message = input.value.trim();
            if (!message) return;
            
            // ÏÇ¨Ïö©Ïûê Î©îÏãúÏßÄ ÌëúÏãú
            addMessage('ÏÇ¨Ïö©Ïûê', message, 'user-message');
            input.value = '';
            
            // API Ìò∏Ï∂ú
            fetch('/api/master-conversation', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ message: message })
            })
            .then(response => response.json())
            .then(data => {
                addMessage('Ï¥åÏû•ÎèÑÍπ®ÎπÑ', data.ai_response || 'ÏùëÎãµÏùÑ Î∞õÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.', 'ai-message');
            })
            .catch(error => {
                addMessage('ÏãúÏä§ÌÖú', 'Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: ' + error.message, 'ai-message');
            });
        }
        
        function addMessage(sender, message, className) {
            const history = document.getElementById('chatHistory');
            const div = document.createElement('div');
            div.className = 'message ' + className;
            div.innerHTML = '<strong>' + sender + ':</strong> ' + message.replace(/\\n/g, '<br>');
            history.appendChild(div);
            history.scrollTop = history.scrollHeight;
        }
        
        // ÏóîÌÑ∞ÌÇ§Î°ú Ï†ÑÏÜ°
        document.getElementById('messageInput').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') sendMessage();
        });
        
        // Ï¥àÍ∏∞ Î©îÏãúÏßÄ
        addMessage('Ï¥åÏû•ÎèÑÍπ®ÎπÑ', 'Ïñ¥ÏÑú Ïò§Í≤åÎÇò! ÎÇòÎäî Ïù¥ ÎßàÏùÑÏùò Ï¥åÏû•ÎèÑÍπ®ÎπÑÎùºÎÑ§! ÏïÑÏù¥ÎîîÏñ¥ ÏÉùÏÑ±, ÏÇ¨ÏóÖ ÏÉÅÎã¥, ÎßàÏºÄÌåÖ Ï†ÑÎûµ Îì± Î≠êÎì†ÏßÄ ÎèÑÏôÄÏ£ºÍ≤†Îã§ÎÑ§! "ÏïÑÏù¥ÎîîÏñ¥ ÏÉùÏÑ±Ìï¥Ï§ò" Ïù¥Îü∞ ÏãùÏúºÎ°ú Ìé∏ÌïòÍ≤å ÎßêÌï¥Î≥¥Í≤å! ÌÅ¨ÌïòÌïò! üéØ', 'ai-message');
    </script>
</body>
</html>"""


@app.route("/api/master-conversation", methods=["POST"])
def master_conversation():
    """ÏõêÎ≥∏ Ï¥åÏû• ÏãúÏä§ÌÖúÏùò ÎßàÏä§ÌÑ∞ ÎåÄÌôî API"""
    try:
        data = request.get_json()
        message = data.get("message", "")
        conversation_id = data.get("conversation_id", "default_session")

        # ÎåÄÌôî Î©îÎ™®Î¶¨ ÏóÖÎç∞Ïù¥Ìä∏
        update_conversation_memory(conversation_id, message, "user")

        # Î©îÏãúÏßÄ Î∂ÑÏÑù
        analysis = master_analyze_user_message(message, conversation_id)

        print(f"üîç Í∞êÏßÄÎêú Ï†ÑÎ¨∏ ÌÇ§ÏõåÎìú: {analysis['detected_keywords']}")
        print(f"üéØ ÏùòÎèÑ: {analysis['intent']}")

        # ÏùëÎãµ ÏÉùÏÑ±
        response = generate_master_response(message, analysis, conversation_id)

        # AI ÏùëÎãµÏùÑ Î©îÎ™®Î¶¨Ïóê Ï†ÄÏû•
        update_conversation_memory(conversation_id, response, "ai")

        return jsonify(
            {
                "type": "ÎßàÏä§ÌÑ∞ AI ÎåÄÌôî",
                "user_message": message,
                "ai_response": response,
                "analysis": analysis,
                "context_used": len(conversation_memory.get(conversation_id, [])),
                "timestamp": datetime.now().isoformat(),
                "conversation_id": conversation_id,
            }
        )

    except Exception as e:
        return (
            jsonify(
                {
                    "ai_response": f"Ïñ¥Ìóà! Î≠îÍ∞Ä Î¨∏Ï†úÍ∞Ä ÏÉùÍ≤ºÎã§ÎÑ§: {str(e)}",
                    "status": "error",
                }
            ),
            500,
        )


@app.route("/api/test")
def test():
    return {
        "status": "ok",
        "message": "Village Chief ÏõêÎ≥∏ ÏãúÏä§ÌÖú Ï†ïÏÉÅ ÏûëÎèô",
        "version": "Ï¥åÏû• Ïò§Î¶¨ÏßÄÎÑê",
    }


if __name__ == "__main__":
    app.run(debug=True)
